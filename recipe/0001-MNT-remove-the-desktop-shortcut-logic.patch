diff --git a/larch/apps.py b/larch/apps.py
index b474c986..c663d47d 100644
--- a/larch/apps.py
+++ b/larch/apps.py
@@ -4,8 +4,6 @@ import numpy
 import time
 from argparse import ArgumentParser
 
-from pyshortcuts import make_shortcut, ico_ext
-
 from .site_config import icondir, home_dir, uname
 from .shell import shell
 from .xmlrpc_server import larch_server_cli
@@ -69,31 +67,12 @@ class LarchApp:
         self.name = name
         self.script = script
         self.terminal = terminal
-        self.icon = "%s.%s" % (icon, ico_ext)
         bindir = 'Scripts' if uname == 'win' else 'bin'
         self.bindir = os.path.join(sys.prefix, bindir)
 
     def create_shortcut(self):
-        script = os.path.join(self.bindir, self.script)
-        icon = os.path.join(icondir, self.icon)
-        if HAS_CONDA and uname == 'win':
-            baserunner = os.path.join(self.bindir, 'baserunner.bat')
-            script = "%s %s" % (baserunner, self.script)
-            if not os.path.exists(baserunner) or os.stat(baserunner).st_size < 10:
-                fh = open(baserunner, 'w')
-                fh.write(WIN_BASERUNNER)
-                fh.close()
-                time.sleep(0.5)
-
-        make_shortcut(script, name=self.name, icon=icon,
-                      terminal=self.terminal, folder='Larch')
-
-        if HAS_CONDA and uname == 'darwin':
-            try:
-                fix_darwin_shebang(script)
-            except:
-                print("Warning: could not fix Mac exe for ", script)
-
+        ...
+        
 APPS = (LarchApp('Larch CLI', 'larch', terminal=True),
         LarchApp('Larch GUI', 'larch --wxgui'),
         LarchApp('XAS Viewer',  'xas_viewer',  icon='onecone'),
@@ -105,12 +85,6 @@ APPS = (LarchApp('Larch CLI', 'larch', terminal=True),
         LarchApp('1D XRD Viewer', 'xrd1d_viewer') )
 
 
-def make_desktop_shortcuts():
-    """make desktop shortcuts for Larch apps"""
-    for app in APPS:
-        app.create_shortcut()
-
-
 def make_cli(description='run larch program', filedesc='data file'):
     usage = "usage: %prog [options] file"
     parser = ArgumentParser(description=description)
@@ -172,16 +146,6 @@ def run_dioptas_larch():
     from dioptas import main
     main()
 
-def run_feff6l():
-    "run feff6l"
-    from larch.xafs.feffrunner import feff6l_cli
-    feff6l_cli()
-
-def run_feff8l():
-    "run feff8l"
-    from larch.xafs.feffrunner import feff8l_cli
-    feff8l_cli()
-
 def run_larch_server():
     "run larch XMLRPC server"
     larch_server_cli()
@@ -231,7 +195,6 @@ def run_larch():
 
     # create desktop icons
     if args.makeicons:
-        make_desktop_shortcuts()
         return
 
     # run in server mode
diff --git a/setup.py b/setup.py
index b0e6420f..95cc7289 100644
--- a/setup.py
+++ b/setup.py
@@ -152,11 +152,6 @@ setup(name = 'xraylarch',
                    'Topic :: Scientific/Engineering'],
       )
 
-# create desktop icons
-if INSTALL or DEVELOP:
-    subprocess.check_call((pjoin(sys.exec_prefix, sys.executable),
-                           pjoin(sys.exec_prefix, bindir, larchbin), '-m'))
-
 if len(missing) > 0:
     dl = "#%s#" % ("="*75)
     msg = """%s
